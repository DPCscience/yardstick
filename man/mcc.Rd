% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/two_class.R
\name{mcc}
\alias{mcc}
\alias{mcc.data.frame}
\alias{mcc.table}
\alias{mcc.matrix}
\alias{mcc_vec}
\alias{j_index}
\alias{j_index.data.frame}
\alias{j_index.table}
\alias{j_index.matrix}
\alias{j_index_vec}
\alias{bal_accuracy}
\alias{bal_accuracy.data.frame}
\alias{bal_accuracy.table}
\alias{bal_accuracy.matrix}
\alias{bal_accuracy_vec}
\alias{detection_prevalence}
\alias{detection_prevalence.data.frame}
\alias{detection_prevalence.table}
\alias{detection_prevalence.matrix}
\alias{detection_prevalence_vec}
\title{Other Metrics for 2x2 Tables}
\usage{
mcc(data, ...)

\method{mcc}{data.frame}(data, truth, estimate, averaging = "binary",
  na.rm = TRUE, ...)

\method{mcc}{table}(data, averaging = "binary", ...)

\method{mcc}{matrix}(data, averaging = "binary", ...)

mcc_vec(truth, estimate, averaging = "binary", na.rm = TRUE, ...)

j_index(data, ...)

\method{j_index}{data.frame}(data, truth, estimate, averaging = "binary",
  na.rm = TRUE, ...)

\method{j_index}{table}(data, averaging = "binary", ...)

\method{j_index}{matrix}(data, averaging = "binary", ...)

j_index_vec(truth, estimate, averaging = "binary", na.rm = TRUE, ...)

bal_accuracy(data, ...)

\method{bal_accuracy}{data.frame}(data, truth, estimate,
  averaging = "binary", na.rm = TRUE, ...)

\method{bal_accuracy}{table}(data, averaging = "binary", ...)

\method{bal_accuracy}{matrix}(data, averaging = "binary", ...)

bal_accuracy_vec(truth, estimate, averaging = "binary", na.rm = TRUE,
  ...)

detection_prevalence(data, ...)

\method{detection_prevalence}{data.frame}(data, truth, estimate,
  averaging = "binary", na.rm = TRUE, ...)

\method{detection_prevalence}{table}(data, averaging = "binary", ...)

\method{detection_prevalence}{matrix}(data, averaging = "binary", ...)

detection_prevalence_vec(truth, estimate, averaging = "binary",
  na.rm = TRUE, ...)
}
\arguments{
\item{data}{Either a \code{data.frame} containing the \code{truth} and \code{estimate}
columns, or a \code{table}/\code{matrix} where the true class results should be
in the columns of the table.}

\item{...}{Not currently used.}

\item{truth}{The column identifier for the true class results
(that is a \code{factor}). This should be an unquoted column name although
this argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote column
names). For \code{_vec()} functions, a \code{factor} vector.}

\item{estimate}{The column identifier for the predicted class
results (that is also \code{factor}). As with \code{truth} this can be
specified different ways but the primary method is to use an
unquoted variable name. For \code{_vec()} functions, a \code{factor} vector.}

\item{na.rm}{A \code{logical} value indicating whether \code{NA}
values should be stripped before the computation proceeds.}
}
\description{
Other metrics for two class problems that are not already in
\code{\link[=sens]{sens()}} or \code{\link[=recall]{recall()}} are here, such as the Matthews
correlation coefficient, Youden's J, the balanced accuracy (the
average between sensitivity and specificity), and the detection
prevalence (the rate of \emph{predicted} events).
}
\details{
There is no common convention on which factor level should
automatically be considered the "event" or "positive" results.
In \code{yardstick}, the default is to use the \emph{first} level. To
change this, a global option called \code{yardstick.event_first} is
set to \code{TRUE} when the package is loaded. This can be changed
to \code{FALSE} if the last level of the factor is considered the
level of interest.

If more than one statistic is required, it is more
computationally efficient to create the confusion matrix using
\code{\link[=conf_mat]{conf_mat()}} and applying the corresponding \code{summary} method
(\code{\link[=summary.conf_mat]{summary.conf_mat()}}) to get the values at once.
}
\examples{
data("two_class_example")

mcc(two_class_example, truth, predicted)

j_index(two_class_example, truth, predicted)

bal_accuracy(two_class_example, truth, predicted)

detection_prevalence(two_class_example, truth, predicted)
}
\seealso{
\code{\link[=conf_mat]{conf_mat()}}, \code{\link[=summary.conf_mat]{summary.conf_mat()}}, \code{\link[=recall]{recall()}}, \code{\link[=sens]{sens()}}, \code{\link[=spec]{spec()}}
}
\author{
Max Kuhn
}
