% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/probs.R
\name{roc_auc}
\alias{roc_auc}
\alias{roc_auc.default}
\alias{pr_auc}
\alias{pr_auc.default}
\alias{roc_curve}
\alias{pr_curve}
\alias{roc_auc.data.frame}
\alias{roc_auc_vec}
\alias{pr_auc.data.frame}
\alias{pr_auc_vec}
\alias{mn_log_loss}
\alias{mn_log_loss.data.frame}
\alias{mn_log_loss_vec}
\alias{roc_curve.data.frame}
\alias{pr_curve.data.frame}
\title{Metrics Based on Class Probabilities}
\usage{
roc_auc(data, ...)

\method{roc_auc}{data.frame}(data, truth, ..., options = list(),
  averaging = NULL, na.rm = TRUE)

roc_auc_vec(truth, estimate, options = list(), averaging = NULL,
  na.rm = TRUE, ...)

pr_auc(data, ...)

\method{pr_auc}{data.frame}(data, truth, estimate, na.rm = TRUE, ...)

pr_auc_vec(truth, estimate, na.rm = TRUE, ...)

mn_log_loss(data, ...)

\method{mn_log_loss}{data.frame}(data, truth, ..., na.rm = TRUE,
  sum = FALSE)

mn_log_loss_vec(truth, estimate, na.rm = TRUE, sum = FALSE, ...)

roc_curve(data, ...)

\method{roc_curve}{data.frame}(data, truth, estimate, options = list(),
  na.rm = TRUE, ...)

pr_curve(data, ...)

\method{pr_curve}{data.frame}(data, truth, estimate, na.rm = TRUE, ...)
}
\arguments{
\item{data}{A \code{data.frame} containing the \code{truth} and \code{estimate}
columns.}

\item{...}{For \code{mn_log_loss()}, a set of unquoted column names or one or more
\code{dplyr} selector functions to choose which variables contain the
class probabilities. There should be as many columns as
factor levels of \code{truth}. It is \strong{assumed} that they are in the
same order as the factor levels. Otherwise, unused.}

\item{truth}{The column identifier for the true class results
(that is a \code{factor}). This should be an unquoted column name although
this argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote column
names). For \code{_vec()} functions, a \code{factor} vector.}

\item{options}{A \code{list} of named options to pass to \code{\link[=roc]{roc()}}
such as \code{direction} or \code{smooth}. These options should not include \code{response},
\code{predictor}, or \code{levels}.}

\item{averaging}{One of: \code{"binary"}, \code{"macro"}, \code{"macro_weighted"},
or \code{"micro"} to specify the type of averaging to be done. \code{"binary"} is
only relevant for the two class case. The other three are general methods for
calculating multiclass metrics. The default will automatically choose \code{"binary"}
or \code{"macro"} based on \code{estimate}.}

\item{na.rm}{A \code{logical} value indicating whether \code{NA}
values should be stripped before the computation proceeds.}

\item{estimate}{The column identifier for the predicted class probabilities
(that is a \code{numeric}) corresponding to the "positive" result. See Details.
For \code{_vec()} functions, a \code{numeric} vector. For \code{mn_log_loss_vec}, this should
be a matrix with as many columns as factor levels in \code{truth}.}

\item{sum}{A \code{logical}. Should the sum of the likelihood contributions be
returned (instead of the mean value)?}
}
\value{
For \code{_vec()} functions, a single \code{numeric} value (or \code{NA}). Otherwise, a
\code{tibble} with columns \code{.metric} and \code{.estimate} and 1 row of
values.

For grouped data frames, the number of rows returned will be the
same as the number of groups.

For \code{roc_curve()}, a tibble with columns
\code{sensitivity} and \code{specificity}. If an ordinary (i.e. non-smoothed) curve
is used, there is also a column for \code{threshold}.

For \code{pr_curve()}, a tibble with columns \code{recall}, \code{precision}, and
\code{threshold}.
}
\description{
These functions compute the areas under the receiver operating
characteristic (ROC) curve (\code{roc_auc()}), the precision-recall
curve (\code{pr_auc()}), or the multinomial log loss (\code{mn_log_loss()}). The actual ROC
curve can be created using \code{roc_curve()}. The actual PR curve can be created
using \code{pr_curve()}.
}
\details{
There is no common convention on which factor level should
automatically be considered the "relevant" or "positive" results.
In \code{yardstick}, the default is to use the \emph{first} level. To
change this, a global option called \code{yardstick.event_first} is
set to \code{TRUE} when the package is loaded. This can be changed
to \code{FALSE} if the last level of the factor is considered the
level of interest.

\code{roc_curve()} computes the sensitivity at every unique
value of the probability column (in addition to infinity and
minus infinity). If a smooth ROC curve was produced, the unique
observed values of the specificity are used to create the curve
points. In either case, this may not be efficient for large data
sets.

\code{pr_curve()} computes the precision at every unique value of the
probability column (in addition to infinity).
}
\examples{
library(tidyselect)

data("two_class_example")
prob_cols <- levels(two_class_example$truth)

roc_auc(two_class_example, truth = truth, Class1)

library(ggplot2)
library(dplyr)

roc_curve(two_class_example, truth, Class1) \%>\%
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 3) +
  coord_equal() +
  theme_bw()

pr_curve(two_class_example, truth, Class1) \%>\%
  ggplot(aes(x = recall, y = precision)) +
  geom_path() +
  coord_equal() +
  theme_bw()

# passing options via a list and _not_ `...`
roc_auc(two_class_example, truth = truth, Class1,
        options = list(smooth = TRUE))


pr_auc(two_class_example, truth, Class1)

mn_log_loss(two_class_example, truth, starts_with("Class"))
# or
mn_log_loss(two_class_example, truth, !! prob_cols)
}
\seealso{
\code{\link[=conf_mat]{conf_mat()}}, \code{\link[=summary.conf_mat]{summary.conf_mat()}}, \code{\link[=recall]{recall()}}, \code{\link[=mcc]{mcc()}}
}
\keyword{manip}
